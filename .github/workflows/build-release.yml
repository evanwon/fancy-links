name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.1.0

permissions:
  contents: write  # Required for creating releases and uploading assets

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        browser: [firefox]  # Future: [firefox, chrome, edge]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 50  # Fetch enough history for changelog generation
      
    - name: Fetch tags for changelog generation
      run: git fetch --tags origin
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install build tools
      run: |
        npm install -g web-ext  # Firefox extension tool
        # Future: npm install -g chrome-webstore-upload-cli
        
    - name: Validate manifest
      run: |
        echo "Validating manifest.json for ${{ matrix.browser }}..."
        node -e "
          const manifest = JSON.parse(require('fs').readFileSync('src/manifest.json', 'utf8'));
          console.log('Extension:', manifest.name, 'v' + manifest.version);
          console.log('Target browser: ${{ matrix.browser }}');
          if (!manifest.version) throw new Error('No version in manifest');
          if ('${{ matrix.browser }}' === 'firefox' && manifest.manifest_version !== 2) {
            console.warn('Firefox build using Manifest V2');
          }
        "
        
    - name: Run cross-browser tests
      run: |
        echo "Running test suite (browser-agnostic)..."
        node test/test-clean-url.js
        node test/test-formats.js
        
    - name: Firefox - Lint extension
      if: matrix.browser == 'firefox'
      run: |
        echo "Firefox: Linting extension with web-ext..."
        web-ext lint --source-dir=src --warnings-as-errors
        
    - name: Firefox - Build extension
      if: matrix.browser == 'firefox'
      run: |
        echo "Firefox: Building extension with web-ext..."
        web-ext build --source-dir=src --artifacts-dir=dist --overwrite-dest
        
    - name: Firefox - Sign extension (optional)
      if: matrix.browser == 'firefox' && env.AMO_API_KEY != '' && env.AMO_API_SECRET != ''
      env:
        AMO_API_KEY: ${{ secrets.AMO_API_KEY }}
        AMO_API_SECRET: ${{ secrets.AMO_API_SECRET }}
      run: |
        echo "Firefox: Signing extension for self-distribution..."
        web-ext sign --source-dir=src --artifacts-dir=dist-signed \
          --api-key="$AMO_API_KEY" --api-secret="$AMO_API_SECRET" \
          --channel=unlisted || echo "Signing failed or not configured"
        
    # Future Chrome/Edge build steps would go here:
    # - name: Chrome - Build extension
    #   if: matrix.browser == 'chrome'
    #   run: echo "Chrome build steps..."
        
    - name: Extract version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Firefox - Get build artifact
      if: matrix.browser == 'firefox'
      id: get_firefox_artifact
      run: |
        # Check for signed version first, fall back to unsigned
        if [ -d "dist-signed" ] && [ "$(ls -A dist-signed/*.xpi 2>/dev/null)" ]; then
          filename=$(ls dist-signed/*.xpi | head -1 | xargs basename)
          filepath="dist-signed/$filename"
          echo "signed=true" >> $GITHUB_OUTPUT
        else
          filename=$(ls dist/*.zip | head -1 | xargs basename)
          filepath="dist/$filename"
          echo "signed=false" >> $GITHUB_OUTPUT
        fi
        echo "filename=$filename" >> $GITHUB_OUTPUT
        echo "filepath=$filepath" >> $GITHUB_OUTPUT
        echo "Found Firefox artifact: $filename (signed: $([ -d dist-signed ] && echo 'yes' || echo 'no'))"
        
    - name: Generate changelog
      id: changelog
      run: |
        # Find the previous tag (second most recent)
        previous_tag=$(git tag -l --sort=-version:refname | sed -n '2p')
        
        if [ -n "$previous_tag" ]; then
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes since $previous_tag" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" $previous_tag..HEAD >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## Initial Release" >> $GITHUB_OUTPUT
          echo "First official release of Fancy Links browser extension." >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Features" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" --reverse >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release with Asset (Firefox)
      if: matrix.browser == 'firefox'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Use appropriate source path and extension
        if [ "${{ steps.get_firefox_artifact.outputs.signed }}" == "true" ]; then
          # Already has .xpi extension from signing
          cp "${{ steps.get_firefox_artifact.outputs.filepath }}" "dist/fancy-links-firefox-v${{ steps.get_version.outputs.version }}-signed.xpi"
          xpi_file="dist/fancy-links-firefox-v${{ steps.get_version.outputs.version }}-signed.xpi"
        else
          # Rename unsigned .zip to .xpi
          mv "${{ steps.get_firefox_artifact.outputs.filepath }}" "dist/fancy-links-firefox-v${{ steps.get_version.outputs.version }}.xpi"
          xpi_file="dist/fancy-links-firefox-v${{ steps.get_version.outputs.version }}.xpi"
        fi
        
        # Create release notes file
        cat > release_notes.md << 'EOF'
        # Fancy Links v${{ steps.get_version.outputs.version }}

        Browser extension for copying formatted links with titles.

        ## Firefox Installation
        
        EOF
        
        # Add appropriate installation instructions based on signing status
        if [ "${{ steps.get_firefox_artifact.outputs.signed }}" == "true" ]; then
          cat >> release_notes.md << 'EOF'
        **✅ This release is signed by Mozilla and can be installed directly.**
        
        1. Download the `.xpi` file below
        2. Open the file with Firefox or drag it into a Firefox window
        3. Click "Add" when prompted
        
        EOF
        else
          cat >> release_notes.md << 'EOF'
        **⚠️ This is an unsigned build. Installation options:**
        
        **Option 1: Firefox Developer Edition or Nightly**
        1. In Firefox Developer/Nightly, go to `about:config`
        2. Set `xpinstall.signatures.required` to `false`
        3. Download and install the `.xpi` file normally
        
        **Option 2: Temporary Installation (Regular Firefox)**
        1. Extract the `.xpi` file (it's a ZIP file)
        2. Go to `about:debugging` → "This Firefox"
        3. Click "Load Temporary Add-on"
        4. Select the `manifest.json` from extracted files
        
        EOF
        fi
        
        cat >> release_notes.md << 'EOF'

        ## What's New
        ${{ steps.changelog.outputs.changelog }}

        ---

        **Firefox Requirements:** Version 109+  
        **Permissions:** clipboardWrite, activeTab, storage, notifications
        EOF
        
        # Create release with asset using GitHub CLI
        gh release create "${{ github.ref_name }}" \
          --title "Fancy Links v${{ steps.get_version.outputs.version }}" \
          --notes-file release_notes.md \
          "$xpi_file"
        
    - name: Build Summary
      run: |
        echo "🎉 ${{ matrix.browser }} build completed for v${{ steps.get_version.outputs.version }}!"
        if [ "${{ matrix.browser }}" == "firefox" ]; then
          if [ "${{ steps.get_firefox_artifact.outputs.signed }}" == "true" ]; then
            echo "✅ Firefox Asset: fancy-links-firefox-v${{ steps.get_version.outputs.version }}-signed.xpi (SIGNED)"
          else
            echo "⚠️ Firefox Asset: fancy-links-firefox-v${{ steps.get_version.outputs.version }}.xpi (unsigned)"
          fi
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        fi